name: Deploy Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.5

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./terraform/gke

    # - name: Apply Terraform
    #   run: terraform apply -auto-approve
    #   working-directory: ./terraform/gke

    - name: Install gke-gcloud-auth-plugin
      run: |
        # Add the Google Cloud SDK distribution URI as a package source
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

        # Download and add the Google Cloud public keyring
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg

        # Update and install the plugin
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin


    - name: Get GKE credentials
      run: gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.GCP_REGION }} --project ${{ env.GCP_PROJECT }}

    - name: Checkout forked microservices-demo repository
      uses: actions/checkout@v3
      with:
        repository: kamal-marouane/microservices-demo
        path: microservices-demo

    - name: Deploy the application
      run: kubectl apply -f microservices-demo/release/kubernetes-manifests.yaml

    - name: Wait for pods to be ready
      run: kubectl wait --for=condition=ready pod --all --timeout=300s

    - name: Get frontend service external IP
      run: kubectl get service frontend-external | awk '{print $4}'

    - name: Terraform destroy on failure
      if: failure()
      run: terraform destroy -auto-approve
      env:
        TF_VAR_project_id: ${{ env.GCP_PROJECT }}
        TF_VAR_region: ${{ env.GCP_REGION }}
        TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
